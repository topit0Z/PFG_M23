#!/bin/bash
#	DTE-Admin-functions
#	Pedro Requena <pf.requena@alumnos.upm.es>
#
# En este fichero se encuentran todas las funciones de las que hacen uso
# los scripts que componen el DTE-Admin


### Funciones auxiliares para el manejo de los diálogos whiptail ###

#_contraseña()
#	Formulario de petición de contraseña 
function _contraseña()
{
	local respuesta=""
	
	respuesta=$(whiptail --title "$TITULO" \
                     --passwordbox "Introduzca la contraseña:" 7 70 \
                     3>&1 1>&2 2>&3)
	echo $respuesta
}

#_confirmacion()
#	Formulario de confirmación Sí/no
#	$1 Texto de la confirmación
#	$2 Valor por defecto
function _confirmacion()
{
	whiptail --title "$TITULO" \
	--yesno "$1" 10 78 "$2"
}

#_info()
#	Mensaje de información
#	$1 Texto del mensaje
function _info()
{
	local TERM=ansi #Debemos cambiar temporalmente el tipo de Terminal debido a un bug de whiptail infobox con xterm
	
	txt="$1"
	
	whiptail --title "$TITULO" \
	--infobox "$txt" 10 70
}

#_leer_fichero()
#	Diálogo para mostrar el contenido de un fichero de texto
#	$1 Subtítulo del diálogo
#	$2 Ruta del fichero de texto
function _leer_fichero()
{
	local subtitulo=""
	local fichero=""
	subtitulo="$1"
	fichero="$2"
	
	whiptail --title "$TITULO - $subtitulo" \
	--textbox "$fichero" 20 70 \
	--scrolltext
}

#_mensaje()
#	Mensaje de información con botón de Aceptar
#	$1 Texto del mensaje
function _mensaje()
{
	local msg="$1"
	
	whiptail --title "$TITULO" \
	--msgbox "$msg" \
	15 70
}

#_formulario()
#	Formulario estándar para solicitar información al usuario
#	$1 Texto de solicitud
#	$2 Valor por defecto
function _formulario()
{
	local pregunta="$1"
	local default="$2"

	local respuesta=$(whiptail --title "$TITULO" \
                     --inputbox "$pregunta" 10 70 "$default" \
                     3>&1 1>&2 2>&3)
                     
    echo $respuesta
}

##########

### Funciones generales ###

#make_backups()
#	Función para la creación de copias de seguridad
function make_backups()
{
	cp -f /etc/default/grub /etc/default/grub.dte_bak
	cp -f /etc/network/interfaces /etc/network/interfaces.dte_bak
	cp -f /etc/sysctl.conf /etc/sysctl.conf.dte_bak
	cp -f /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
	
	return 0
}

#_restore_network()
#	Función para la restauración del estado original de las interfaces de red
function _restore_network()
{

	mv /etc/network/interfaces.dte_bak /etc/network/interfaces
	systemctl restart networking
	
	mv /etc/sysctl.conf.dte_bak /etc/sysctl.conf
		
	return 0
}

#_restore_grub()
#	Función para la restauración del estado original del GRUB - Opciones de arranque del sistema
function _restore_grub()
{
	mv /etc/default/grub.dte_bak /etc/default/grub
	grub-mkconfig -o /boot/grub/grub.cfg

	return 0
}

#_restore_grub()
#	Función para la restauración de las copias de seguridad
function restore_backups()
{
	_restore_network
	_restore_grub

	return 0
}

# instalar_m23()
#	Función para la instalación de m23 y sus dependencias
#	return 0 --> si ya está instalado || si la instalación se ha completado satisfactoriamente
#	return 1 --> La instalación ha fallado
function instalar_m23()
{
	if [ ! -f "$FLAG_CONF_M23_FILE" ]; then
		# Si no existe la clave del repositorio APT de M23, la añadimos
		(apt-key list 2> /dev/null | grep -q "Hauke Goos-Habermann") || (wget -T1 -t1 -q http://m23.sourceforge.net/m23-Sign-Key.asc -O - | apt-key add -)
		
		# Si no existe el repositorio de M23 en los sources de APT, lo añadimos
		[ -f /etc/apt/sources.list.d/m23.list ] || echo 'deb http://m23inst.goos-habermann.de ./' > /etc/apt/sources.list.d/m23.list
		
		#Actualizamos la base de datos de APT
		apt update
		
		#Instalamos M23 y sus dependencias
		apt install -y m23
		
		local ret=$?
		
		[ $ret -eq 0 ] && { _mensaje "La instalación de m23 ha finalizado.";touch "$FLAG_CONF_M23_FILE";touch $FLAG_CONF_M23_FILE;return 0; } || { _mensaje "¡Error! La instalación de m23 ha fallado."; return 1; }
	else
		_mensaje "¡Error! m23 ya está instalado"
		return 0
	fi
}

#escanear_MAC()
# 	Escanea la red de área local en busca de clientes 
# 	que trate de realizar un arranque PXE
# 	y almacena sus direcciones MAC en el fichero $result_file
#	return 0 --> se ha podidor realizar la captura, independientemente de si se han encontrado o no clientes
#	return 1 --> las interfaces de red no están configuradas adecuadamente
function escanear_MAC()
{
	if [[ $(ip link show eth0) ]]; then

		local tmp_file=/tmp/macs_tmp.txt
		
		local result_file=$(_formulario "Indique el fichero dónde guardar los resultados:" "$HOME/mac.list" )
		
		#Borramos el fichero de resultados para no duplicar direcciones MAC
		[ -f "$result_file" ] && rm -f $result_file 
		
		#Analizamos el tráfico de red en busca de arranques PXE
		(tcpdump -i eth0 -qtel broadcast and port bootpc >$tmp_file 2>/dev/null)& 
		_mensaje "Escaneando direcciones MAC...\nPulse aceptar para terminar."
		#Cuando el usuario pulse Aceptar, se mata al proceso para acabar la captura
		sudo killall tcpdump
		
		#Se filtra y ordena el contenido de los resultados
		(perl -ane 'print "\U$F[0]\n"' $tmp_file|awk '!x[$0]++') > $result_file
		sed -i '/^$/d' "$result_file"
		rm -f "$tmp_file"
		
		if [ -s "$result_file" ]; then
	      	#El fichero de resultados NO está vacío
			_leer_fichero "Direcciones MAC encontradas:" $result_file
			_mensaje "Las direcciones MAC se han guardado en $result_file"
		else
			#El fichero de resultados está vacío
			_mensaje "No se han encontrado clientes."
		fi
	else
		_mensaje "¡Error! Debe configurar las interfaces de red antes de escanear direcciones MAC."
		return 1
	fi

	return 0
}

#get_nombrado_interfaces()
#	Función para obtener el criterio de nombrado de las interfaces de red
#	que se está utilizando.
function get_nombrado_interfaces()
{

	local if_type=""

	cat /etc/default/grub | grep "net.ifnames=0 biosdevname=0" > /dev/null && if_type="Clásico (ethX)" || if_type="Normal (enpXsY, enoX, ...)"
	
	[ "$1" = "show" ] && _mensaje "El nombrado actual de las interfaces de red es:\n$if_type"
	
	echo $if_type

	return 0
}

#get_static_red()
#	Función para obtener los atributos de red 
#	$1 Nombre de la interfaz de red
get_static_red()
{	
	local iface=""; iface="$1"
	IPADDR=$(ifconfig "$iface"| grep -w inet |grep -v 127.0.0.1| awk '{print $2}' | cut -d ":" -f 2)
	NETMASK=$(ifconfig "$iface" | grep -w inet |grep -v 127.0.0.1| awk '{print $4}' | cut -d ":" -f 2)
	GATEWAY=$(route -n | grep 'UG[ \t]' | awk '{print $2}')
	IPADDR_ICDR=$(ip -o -f inet addr show "$iface" | awk '/scope global/ {print $4}')
	
	return 0
}

#set_dhcp_red()
#	Función para configurar una interfaz de red con DHCP
#	$1 Nombre de la interfaz de red
set_dhcp_red()
{
	local iface=""; iface="$1"
    echo ""  >> "$INTERFACES_FILE"
    echo "allow-hotplug $iface" >> "$INTERFACES_FILE"
    echo "iface $iface inet dhcp" >> "$INTERFACES_FILE"
  
	return 0
}

#set_static_red()
#	Función para configurar una interfaz de red de forma estática
#	$1 Nombre de la interfaz de red
#	$2 Dirección IP
#	$3 Máscara de subred
#	$4 Dirección de la puerta de enlace
set_static_red()
{ 
	local iface=""; iface="$1"
	
	IPADDR="$2"
    NETMASK="$3"
    GATEWAY="$4"
	
	if [ "$iface" = "" ]; then #Configuración por defecto
		iface="eth0"
		echo "auto lo" > "$INTERFACES_FILE"
		echo "iface lo inet loopback" >> "$INTERFACES_FILE"
	fi

	echo ""  >> "$INTERFACES_FILE"
	echo "auto $iface" >> "$INTERFACES_FILE"
	echo "iface $iface inet static" >> "$INTERFACES_FILE"
	echo "  address $IPADDR" >> "$INTERFACES_FILE"
	echo "  netmask $NETMASK" >> "$INTERFACES_FILE"
	[ "$GATEWAY" != "" ] && echo "  gateway $GATEWAY" >> "$INTERFACES_FILE"  
	
  
	return 0  
}

#configurar_red()
#	Función para la configuración global de las interfaces de red
#	return 1 --> Si alguna de las interfaces no existe || Si el criterio de nombrado no es Clásico || No se puede reiniciar el servicio de red
#	return 0 --> Las interfaces se configuran correctamente
function configurar_red()
{
	local if_type=$(get_nombrado_interfaces)
	
	if [[ $(echo $if_type | grep Clásico) || "$1" = "nocheck" ]]; then #Se requiere nombrado clásico para la configuración
		
		#Configuración por defecto
		if (_confirmacion "¿Desea aplicar la configuración por defecto?\n\neth0 --> con dirección IP estática."); then
		
			if [[ $(ip link show eth0) || "$1" = "nocheck" ]]; then
			
				local ipaddr=""; ipaddr=$(_formulario "Indique la dirección IP para eth0:" "192.168.1.110")
				local netmask=""; netmask=$(_formulario "Indique la máscara de Subred:" "255.255.255.0")
				local gateway=""; gateway=$(_formulario "Indique la dirección de Gateway:" "192.168.1.1") 
				
				set_static_red "" "$ipaddr" "$netmask" "$gateway"
				
				_mensaje "La interfaz eth0 ha sido configurada correctamente:\n\nDirección IP --> $ipaddr\nMáscara de Subred --> $netmask\nGateway --> $gateway"
			else
				_mensaje "¡Error! La interfaz eth0 no existe"
				return 1
			fi
		fi
		#Configuración/es adicional/es
		if (_confirmacion "¿Desea realizar alguna otra configuración?" "--defaultno"); then
			
			local iface_b=""; iface_b=$(_formulario "Indique el nombre de la interfaz que desea configurar:" "eth1")
			if [[ $(ip link show "$iface_b") ]]; then
				if (_confirmacion "¿Desea configurar la interfaz con DHCP?"); then
					
					set_dhcp_red "$iface_b"
				else
					ipaddr=$(_formulario "Indique la dirección IP para "$iface_b":" "10.10.10.5")
					netmask=$(_formulario "Indique la máscara de Subred:" "255.255.255.0")
					gateway=$(_formulario "Indique la dirección de Gateway:" "10.10.10.1")
					
					set_static_red "$iface_b" "$ipaddr" "$netmask" "$gateway"
				fi
			else
				_mensaje "¡Error! La interfaz $iface_b no existe"
				return 1
			fi
		fi
	else
		_mensaje "¡Error! Debe cambiar el nombrado de interfaces a Clásico para poder configurarlas con el DTE Admin."
		return 1
	fi
	
	#Reinicio del servicio
	systemctl restart networking
	
	[ $? -eq 0 ] && { _mensaje "Configuración de red aplicada.";  return 0; } && { _mensaje "Error al reiniciar el servicio de red";  return 1; }
}

#set_nombrado_interfaces()
#	Función para cambiar el criterio de nombrado de las interfaces de red
#	$1 Flag para informar de primera ejecución.
function set_nombrado_interfaces()
{
	local mode=""
	
	[ $1 = "first_launcher" ] && mode="$1"
	
	local flag_file=$CONF_DIR/if_conf

	local if_type=$(get_nombrado_interfaces)

	if (_confirmacion "El nombrado actual de las interfaces de red es:\n$if_type\n\n¿Desea cambiarlo?"); then
		_info "Aplicando cambios..."
	    	if [[ $(echo $if_type | grep Normal) ]]; then
			local if_type_final="Clásico (ethX)"	
			sed -ie 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 net.ifnames=0 biosdevname=0"/' /etc/default/grub
			grub-mkconfig -o /boot/grub/grub.cfg &> /dev/null
		else
			local if_type_final="Normal (enpXsY, enoX, ...)"
			
			sed -ie 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX=""/' /etc/default/grub
			grub-mkconfig -o /boot/grub/grub.cfg &> /dev/null
		fi
		_mensaje "El nombrado de las interfaces de red se ha cambiado de $if_type a $if_type_final"
		if [ "$mode" != "first_launcher"]; then
			_mensaje "A continuación se reiniciará el equipo para aplicar los cambios."
			sleep 2
			reboot
			return 0
		fi
	else
		return 0
	fi	
}

#set_ip_forwarding()
#	Función para activar el reenvío de paquetes
#	return 1 --> Si las interfaces de red no están configuradas adecuadamente || Si el reenvío ya está activado
#	return 0 --> El reenvío de paquetes se ha activado correctamente
function set_ip_forwarding()
{
	get_static_red "eht0"
	if [ ! -f "$FLAG_CONF_ROUTER_FILE" ]; then

		if [[ "IPADDR" != "" && "NETMASK" != "" || "$1" = "nocheck" ]]; then
			_mensaje "Asegúrese de tener configurada la interfaz eth0 en la red interna y la interfaz eth1 con salida a internet por NAT en otra subred"
			if(_confirmacion "Activar el Router virtual permitirá que los clientes accedan a internet a través de esta máquina. ¿Desea continuar?"); then
				
				# Primero, lo activamos a nivel de kernel
				echo 1 > /proc/sys/net/ipv4/ip_forward #Lo activamos
				sed -i '/net.ipv4.ip_forward=1/s/^#//g' /etc/sysctl.conf #Descomentamos la línea para hacerlo persistente
				
				
				#Segundo, configuramos iptables
				iptables -t nat -A POSTROUTING -s "$IPADDR_ICDR" -o eth1 -j MASQUERADE
				
				#Lo hacemos persistente
				iptables-save > /etc/iptables/rules.v4
				
				touch "$FLAG_CONF_ROUTER_FILE"
				
				_mensaje "El Router Virtual ha sido activado correctamente"
				return 0
			fi	
		else
			_mensaje "¡Error! Debe configurar las interfaces de red para poder activar el Router virtual."
			return 1
		fi
	else
		_mensaje "¡Error! El Router virtual ya está activado."
		return 1
	fi
	return 0	
}

#unset_ip_forwarding()
#	Función para desactivar el reenvío de paquetes
#	return 1 --> Si el reenvío no está activado
#	return 0 --> El reenvío se ha desactivado correctamente
function unset_ip_forwarding()
{
	if [ -f "$FLAG_CONF_ROUTER_FILE" ]; then
	
		if(_confirmacion "Si desactiva el Router virtual los clientes no podrán accedan a internet a través de esta máquina. ¿Desea continuar?"); then
		
			# Primero, lo desactivamos a nivel de kernel
			echo 0 > /proc/sys/net/ipv4/ip_forward #Lo desactivamos
			sed -i '/net.ipv4.ip_forward=1/s/^/#/g' /etc/sysctl.conf #Comentamos la línea para hacerlo persistente
			
			# Quitamos la regla de iptables
			echo "" > /etc/iptables/rules.v4
			rm -f "$FLAG_CONF_ROUTER_FILE"
			return 0
		fi
	else
		_mensaje "¡Error! El Router virtual no está activado."
		return 1
	fi
	return 0	
}

#enviar_fichero()	
#	Función para enviar ficheros por SCP
#	return 1 --> Si se ha producido algún error en el envío
#	return 0 --> El fichero se ha enviado correctamente
function enviar_fichero()
{
	local file=""
	local host=""
	local user=""
	local pass=""
	local dest_dir=""
	
	file=$(_formulario "Indique el fichero que desea enviar:" "$HOME/mac.list")
	host=$(_formulario "Indique el nombre/dirección del equipo destino:" "10.10.10.2")
	user=$(_formulario "Indique el nombre del usuario destino:" "root")
	pass=$(_contraseña)
	dest=$(_formulario "Indique el directorio de destino:" "/tmp/")
		
	_info "Enviando fichero..."
	
	sshpass -p "$pass" scp "$file" "$user"@"$host":"$dest_dir"
	
	[ $? -eq 0 ] && { _mensaje "Fichero $file enviado con éxito a $host!";return 0; } || { _mensaje "Error al enviar fichero"; return 1; }
}

#acceso_root_ssh()
#	Función para activar o desactivar el acceso SSH con el usuario root
#	return 1 --> Si se produce error al reiniciar el servicio sshd
#	return 0 --> Los cambios y el reinicio del servicio se realizan correctamente
function acceso_root_ssh()
{

	if [ ! -f "$FLAG_CONF_SSH_ROOT_FILE" ]; then
		#El acceso root está desactivado
		if (_confirmacion "Permitir el acceso por SSH al usuario root puede comprometer la seguridad del sistema. ¿Desea continuar?"); then
		
			sed -i 's/#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
			
			touch "$FLAG_CONF_SSH_ROOT_FILE"
			
			systemctl restart sshd 
			
			[ $? -eq 0 ] && _mensaje "Cambios aplicados correctamente" || { _mensaje "Error al reiniciar el servicio sshd"; return 1; }
		fi
	else
		#El acceso root está activado
		if (_confirmacion "El acceso root por SSH está activado actualmente. ¿Desa desactivarlo?"); then
		
			sed -i 's/PermitRootLogin.*/#PermitRootLogin yes/' /etc/ssh/sshd_config
			
			rm -f "$FLAG_CONF_SSH_ROOT_FILE"
			
			systemctl restart sshd 
			
			[ $? -eq 0 ] && _mensaje "Cambios aplicados correctamente" || { _mensaje "Error al reiniciar el servicio sshd"; return 1; }
		fi
	fi
	
	return 0
}